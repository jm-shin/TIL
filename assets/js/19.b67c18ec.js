(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{293:function(a,s,e){"use strict";e.r(s);var t=e(14),r=Object(t.a)({},(function(){var a=this,s=a._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"git"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git"}},[a._v("#")]),a._v(" Git")]),a._v(" "),s("p",[a._v("사용법 및 명령어 설명")]),a._v(" "),s("h2",{attrs:{id:"merge"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#merge"}},[a._v("#")]),a._v(" Merge")]),a._v(" "),s("h3",{attrs:{id:"충돌시-해결-방법"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#충돌시-해결-방법"}},[a._v("#")]),a._v(" 충돌시 해결 방법")]),a._v(" "),s("p",[a._v("git status 입력 시 both modified 적혀있는 파일이 충돌 난 것(빨간색) 해당 파일에 들어가면 아래와 같은 상태.")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">>")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">>")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">>")]),a._v("HEAD\n\n"),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"내 소스코드"')]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("==")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("==")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("==")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("==")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("==")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("==")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("==")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"merge하려는 소스코드"')]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<<<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<<<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<<<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("merge할 브랜치 명"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("\n")])])]),s("p",[a._v("위에 코드를 수정한 뒤 (>>> === <<< 이런것도 전부 지우기)")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("add")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v(".")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 혹은")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("add")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("파일명"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# continue옵션을 주어서 commit 메시지 따로 남기지 않아도 됨")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" merge "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--continue")]),a._v("\n")])])]),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 머지 충돌 이전의 상태로 돌아가고 싶을때 abort 옵션 사용")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" merge "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--abort")]),a._v("\n")])])]),s("h2",{attrs:{id:"rebase"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#rebase"}},[a._v("#")]),a._v(" Rebase")]),a._v(" "),s("ul",[s("li",[a._v("rebase는 잘 모르고 사용할 경우 위험하지만, 커밋스토리를 깔끔하게 관리할 수 있다는 장점이 있다.")]),a._v(" "),s("li",[a._v("작업하다보면 여러 커밋이 발생하고 커밋메시지도 각 커밋의 내용을 대표하지 못하는 경우가 발생하는데, 이때 커밋을 합쳐서 깔끔하게 커밋을 관리하기 위한 용도로 사용하려 한다.\n예시를 들자면 버그를 고치거나 수정사항을 반영하기 위해 간단한 커밋을 여러번하게 되는 경우 발생 => 최종 브런치에 머지를 진행할 때 여태까지의 수정을 위한 커밋들이 모두 반영이 되기때문에\n이쁘게 보이지 않을 수 있음. 즉, 나는 커밋로그를 다듬는 용도로 사용하려 함.")])]),a._v(" "),s("h3",{attrs:{id:"커밋-합치기"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#커밋-합치기"}},[a._v("#")]),a._v(" 커밋 합치기")]),a._v(" "),s("ol",[s("li",[a._v("현재 커밋 상태 확인하기")])]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" log "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--oneline")]),a._v("\n")])])]),s("ol",{attrs:{start:"2"}},[s("li",[a._v("현재(HEAD)를 기준으로 n(숫자)개의 커밋 합치기")])]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[a._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" rebase "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-i")]),a._v(" HEAD~n\n")])])]),s("ol",{attrs:{start:"3"}},[s("li",[a._v("합쳐질 커밋 해시값 앞에 squash(약어 s)를 붙여주기. 즉, pick 대상에 squash로 지정된 커밋이 합쳐짐.")])]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[a._v("pick 해시값 three\ns 해시값 remove one, two\n")])])]),s("ol",{attrs:{start:"4"}},[s("li",[a._v("수정이 마무리되면 :wq로 편집화면 저장")]),a._v(" "),s("li",[a._v("커밋 메시지 하나로 통합해서 적어주기")])]),a._v(" "),s("h3",{attrs:{id:"리베이스"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#리베이스"}},[a._v("#")]),a._v(" 리베이스")]),a._v(" "),s("p",[a._v("Git이 merge commit을 적절하게 처리하여 충돌을 최소화하고 히스토리를 깔끔하게 유지.")]),a._v(" "),s("p",[a._v("rebase 할 때, --rebase-merges 옵션 사용.")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" rebase origin/develop --rebase-merges\n")])])]),s("h3",{attrs:{id:"리베이스-명령어"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#리베이스-명령어"}},[a._v("#")]),a._v(" 리베이스 명령어")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 현재 리베이스 작업을 계속")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" rebase "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--continue")]),a._v("\n")])])]),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 리베이스 작업을 중단하고 이전 상태로 돌아가기. 리베이스 작업을 취소하고 이전 상태로 되돌립니다.")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" rebase "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--abort")]),a._v("\n")])])]),s("h2",{attrs:{id:"git-flow"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-flow"}},[a._v("#")]),a._v(" Git Flow")]),a._v(" "),s("ol",[s("li",[a._v("checkout origin develop")]),a._v(" "),s("li",[a._v("develop 기준으로 feature 브랜치 생성")]),a._v(" "),s("li",[a._v("code 작성")]),a._v(" "),s("li",[a._v("feature 브랜치에서 develop 브랜치로 PR 및 코드리뷰 진행")]),a._v(" "),s("li",[a._v("test 브랜치에서 feature 브랜치 병합 후 개발 환경에서 테스트 진행")]),a._v(" "),s("li",[a._v("staging 브랜치에서 feature 브랜치 병합 후 QA 진행")]),a._v(" "),s("li",[a._v("QA 통과 -> PR 완료해서 develop에 병합")]),a._v(" "),s("li",[a._v("병합 완료된 develop 브랜치에서 release/<배포버전> 브랜치 생성")]),a._v(" "),s("li",[a._v("release 브랜치에서 버전명 변경 (package.json, package-lock.json) 후 커밋")]),a._v(" "),s("li",[a._v("master 브랜치로 - git switch master")]),a._v(" "),s("li",[a._v("git merge release/<배포버전>")]),a._v(" "),s("li",[a._v("git tag <배포버전> && git push origin <배포버전>")]),a._v(" "),s("li",[a._v("원격 마스터에 git push")]),a._v(" "),s("li",[a._v("develop 브랜치 이동 후 -> 배포된 태그(<배포버전>) 병합")]),a._v(" "),s("li",[a._v("release/<배포버전> 브랜치 삭제.")]),a._v(" "),s("li",[a._v("배포 후 특이사항 없으면 병합 완료된 feature 브랜치도 삭제")])]),a._v(" "),s("h2",{attrs:{id:"error-case"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#error-case"}},[a._v("#")]),a._v(" Error Case")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[a._v("warning: Pulling without specifying how to reconcile divergent branches is\ndiscouraged. You can squelch this message by running one of the following\ncommands sometime before your next pull:\n\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" config pull.rebase "),s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("false")]),a._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# merge (the default strategy)")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" config pull.rebase "),s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("true")]),a._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# rebase")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" config pull.ff only       "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# fast-forward only")]),a._v("\n\nYou can replace "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"git config"')]),a._v(" with "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"git config --global"')]),a._v(" to "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("set")]),a._v(" a default\npreference "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("for")]),a._v(" all repositories. You can also pass --rebase, --no-rebase,\nor --ff-only on the "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("command")]),a._v(" line to override the configured default per\ninvocation.\n")])])]),s("p",[a._v("1.새로운 브랜치 만들기")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" checkout "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-b")]),a._v(" 새로운브랜치 합치려는브랜치\n")])])]),s("p",[a._v("새로운 브랜치를 만들고 해당 브랜치로 변경")]),a._v(" "),s("p",[a._v("2.업스트림의 원하는 브랜치를 pull받아오기(rebase)")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[a._v("```shell\ngit pull --rebase upstream 합치려는브랜치\n```\n\nrebase 처리해줌으로써 깃 브랜치 상태를 최신화 시켜줄 수 있다.\n")])])]),s("p",[a._v("3.rebase 과정 중 발생할 수 있는 에러"),s("br"),a._v("\n변경된 코드를 보고 살릴 부분을 확인하고 저장 반복")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("add")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v(".")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" rebase "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--continue")]),a._v("\n")])])]),s("p",[a._v("4.rebase 완료 후 합치고자 하던 브랜치와 merge")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("git checkout 합치려던브랜치\ngit merge --no-ff 새로만들었던브랜치\ngit push origin dev\n")])])])])}),[],!1,null,null,null);s.default=r.exports}}]);